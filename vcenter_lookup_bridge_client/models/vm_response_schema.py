# coding: utf-8

"""
    vCenter Lookup Bridge API

    vCenter Lookup Bridge API

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class VmResponseSchema(BaseModel):
    """
    仮想マシンのレスポンススキーマ
    """ # noqa: E501
    cluster: Optional[StrictStr]
    datacenter: StrictStr = Field(description="仮想マシンのデータセンターを示します。")
    disk_devices: Optional[List[Any]] = Field(alias="diskDevices")
    esxi_hostname: Optional[StrictStr] = Field(alias="esxiHostname")
    guest_full_name: StrictStr = Field(description="仮想マシンのゲストOSの種別をフルネームを示します。", alias="guestFullName")
    hostname: Optional[StrictStr]
    hw_version: StrictStr = Field(description="仮想マシンのハードウェアバージョンを示します。", alias="hwVersion")
    instance_uuid: StrictStr = Field(description="仮想マシンのインスタンスUUIDを示します。", alias="instanceUuid")
    ip_address: Optional[StrictStr] = Field(alias="ipAddress")
    memory_size_mb: StrictInt = Field(description="仮想マシンのメモリサイズ(MB)を示します。", alias="memorySizeMB")
    name: StrictStr = Field(description="仮想マシンの名前を示します。")
    network_devices: Optional[List[Any]] = Field(alias="networkDevices")
    num_cpu: StrictInt = Field(description="仮想マシンのCPU数を示します。", alias="numCpu")
    power_state: StrictStr = Field(description="仮想マシンの電源の状態を示します。", alias="powerState")
    template: StrictBool = Field(description="仮想マシンがテンプレートかどうかを示します。")
    uuid: StrictStr = Field(description="仮想マシンのUUIDを示します。")
    vcenter: Optional[StrictStr]
    vm_folder: Optional[StrictStr] = Field(alias="vmFolder")
    vm_path_name: StrictStr = Field(description="仮想マシンのVMXファイルのパスを示します。", alias="vmPathName")
    __properties: ClassVar[List[str]] = ["cluster", "datacenter", "diskDevices", "esxiHostname", "guestFullName", "hostname", "hwVersion", "instanceUuid", "ipAddress", "memorySizeMB", "name", "networkDevices", "numCpu", "powerState", "template", "uuid", "vcenter", "vmFolder", "vmPathName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VmResponseSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if cluster (nullable) is None
        # and model_fields_set contains the field
        if self.cluster is None and "cluster" in self.model_fields_set:
            _dict['cluster'] = None

        # set to None if disk_devices (nullable) is None
        # and model_fields_set contains the field
        if self.disk_devices is None and "disk_devices" in self.model_fields_set:
            _dict['diskDevices'] = None

        # set to None if esxi_hostname (nullable) is None
        # and model_fields_set contains the field
        if self.esxi_hostname is None and "esxi_hostname" in self.model_fields_set:
            _dict['esxiHostname'] = None

        # set to None if hostname (nullable) is None
        # and model_fields_set contains the field
        if self.hostname is None and "hostname" in self.model_fields_set:
            _dict['hostname'] = None

        # set to None if ip_address (nullable) is None
        # and model_fields_set contains the field
        if self.ip_address is None and "ip_address" in self.model_fields_set:
            _dict['ipAddress'] = None

        # set to None if network_devices (nullable) is None
        # and model_fields_set contains the field
        if self.network_devices is None and "network_devices" in self.model_fields_set:
            _dict['networkDevices'] = None

        # set to None if vcenter (nullable) is None
        # and model_fields_set contains the field
        if self.vcenter is None and "vcenter" in self.model_fields_set:
            _dict['vcenter'] = None

        # set to None if vm_folder (nullable) is None
        # and model_fields_set contains the field
        if self.vm_folder is None and "vm_folder" in self.model_fields_set:
            _dict['vmFolder'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VmResponseSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cluster": obj.get("cluster"),
            "datacenter": obj.get("datacenter"),
            "diskDevices": obj.get("diskDevices"),
            "esxiHostname": obj.get("esxiHostname"),
            "guestFullName": obj.get("guestFullName"),
            "hostname": obj.get("hostname"),
            "hwVersion": obj.get("hwVersion"),
            "instanceUuid": obj.get("instanceUuid"),
            "ipAddress": obj.get("ipAddress"),
            "memorySizeMB": obj.get("memorySizeMB"),
            "name": obj.get("name"),
            "networkDevices": obj.get("networkDevices"),
            "numCpu": obj.get("numCpu"),
            "powerState": obj.get("powerState"),
            "template": obj.get("template"),
            "uuid": obj.get("uuid"),
            "vcenter": obj.get("vcenter"),
            "vmFolder": obj.get("vmFolder"),
            "vmPathName": obj.get("vmPathName")
        })
        return _obj


