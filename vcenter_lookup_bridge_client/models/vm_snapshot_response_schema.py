# coding: utf-8

"""
    vCenter Lookup Bridge API

    vCenter Lookup Bridge API

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class VmSnapshotResponseSchema(BaseModel):
    """
    仮想マシンスナップショットのレスポンススキーマ
    """ # noqa: E501
    create_time: StrictStr = Field(description="スナップショットの作成日時を示します。", alias="createTime")
    datacenter: StrictStr = Field(description="仮想マシンのデータセンターを示します。")
    description: Optional[StrictStr]
    has_child: StrictBool = Field(description="このスナップショットを元とした子スナップショットが存在する場合はTrue、存在しない場合はFalseがセットされます。", alias="hasChild")
    id: Optional[StrictInt]
    name: StrictStr = Field(description="スナップショットの名前を示します。")
    parent_id: Optional[StrictInt] = Field(alias="parentId")
    vcenter: Optional[StrictStr]
    vm_folder: Optional[StrictStr] = Field(alias="vmFolder")
    vm_instance_uuid: StrictStr = Field(description="仮想マシンのインスタンスUUIDを示します。", alias="vmInstanceUuid")
    vm_name: StrictStr = Field(description="仮想マシンの名前を示します。", alias="vmName")
    __properties: ClassVar[List[str]] = ["createTime", "datacenter", "description", "hasChild", "id", "name", "parentId", "vcenter", "vmFolder", "vmInstanceUuid", "vmName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VmSnapshotResponseSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if parent_id (nullable) is None
        # and model_fields_set contains the field
        if self.parent_id is None and "parent_id" in self.model_fields_set:
            _dict['parentId'] = None

        # set to None if vcenter (nullable) is None
        # and model_fields_set contains the field
        if self.vcenter is None and "vcenter" in self.model_fields_set:
            _dict['vcenter'] = None

        # set to None if vm_folder (nullable) is None
        # and model_fields_set contains the field
        if self.vm_folder is None and "vm_folder" in self.model_fields_set:
            _dict['vmFolder'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VmSnapshotResponseSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "datacenter": obj.get("datacenter"),
            "description": obj.get("description"),
            "hasChild": obj.get("hasChild"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "parentId": obj.get("parentId"),
            "vcenter": obj.get("vcenter"),
            "vmFolder": obj.get("vmFolder"),
            "vmInstanceUuid": obj.get("vmInstanceUuid"),
            "vmName": obj.get("vmName")
        })
        return _obj


