# coding: utf-8

"""
    vCenter Lookup Bridge API

    vCenter Lookup Bridge API

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from vcenter_lookup_bridge_client.models.healthcheck_schema import HealthcheckSchema
from vcenter_lookup_bridge_client.models.pagination_info import PaginationInfo
from typing import Optional, Set
from typing_extensions import Self

class HealthcheckResponseSchema(BaseModel):
    """
    ヘルスチェックのレスポンススキーマ
    """ # noqa: E501
    message: Optional[StrictStr] = None
    pagination: Optional[PaginationInfo] = None
    request_id: Optional[StrictStr] = Field(default=None, alias="requestId")
    results: HealthcheckSchema = Field(description="実際のデータ")
    success: StrictBool = Field(description="処理成功フラグ (true|false)")
    timestamp: StrictStr = Field(description="レスポンス生成時刻")
    vcenter_ws_sessions: Optional[Dict[str, Any]] = Field(default=None, alias="vcenterWsSessions")
    __properties: ClassVar[List[str]] = ["message", "pagination", "requestId", "results", "success", "timestamp", "vcenterWsSessions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HealthcheckResponseSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of pagination
        if self.pagination:
            _dict['pagination'] = self.pagination.to_dict()
        # override the default output from pydantic by calling `to_dict()` of results
        if self.results:
            _dict['results'] = self.results.to_dict()
        # set to None if message (nullable) is None
        # and model_fields_set contains the field
        if self.message is None and "message" in self.model_fields_set:
            _dict['message'] = None

        # set to None if pagination (nullable) is None
        # and model_fields_set contains the field
        if self.pagination is None and "pagination" in self.model_fields_set:
            _dict['pagination'] = None

        # set to None if request_id (nullable) is None
        # and model_fields_set contains the field
        if self.request_id is None and "request_id" in self.model_fields_set:
            _dict['requestId'] = None

        # set to None if vcenter_ws_sessions (nullable) is None
        # and model_fields_set contains the field
        if self.vcenter_ws_sessions is None and "vcenter_ws_sessions" in self.model_fields_set:
            _dict['vcenterWsSessions'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HealthcheckResponseSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "message": obj.get("message"),
            "pagination": PaginationInfo.from_dict(obj["pagination"]) if obj.get("pagination") is not None else None,
            "requestId": obj.get("requestId"),
            "results": HealthcheckSchema.from_dict(obj["results"]) if obj.get("results") is not None else None,
            "success": obj.get("success"),
            "timestamp": obj.get("timestamp"),
            "vcenterWsSessions": obj.get("vcenterWsSessions")
        })
        return _obj


